// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/services/m3o/api/proto/m3o.proto

package go_micro_api_m3o

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Accounts service

func NewAccountsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Accounts service

type AccountsService interface {
	Read(ctx context.Context, in *ReadAccountRequest, opts ...client.CallOption) (*ReadAccountResponse, error)
	CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...client.CallOption) (*CreatePaymentMethodResponse, error)
	DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...client.CallOption) (*DeletePaymentMethodResponse, error)
	DefaultPaymentMethod(ctx context.Context, in *DefaultPaymentMethodRequest, opts ...client.CallOption) (*DefaultPaymentMethodResponse, error)
}

type accountsService struct {
	c    client.Client
	name string
}

func NewAccountsService(name string, c client.Client) AccountsService {
	return &accountsService{
		c:    c,
		name: name,
	}
}

func (c *accountsService) Read(ctx context.Context, in *ReadAccountRequest, opts ...client.CallOption) (*ReadAccountResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.Read", in)
	out := new(ReadAccountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, opts ...client.CallOption) (*CreatePaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.CreatePaymentMethod", in)
	out := new(CreatePaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...client.CallOption) (*DeletePaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.DeletePaymentMethod", in)
	out := new(DeletePaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsService) DefaultPaymentMethod(ctx context.Context, in *DefaultPaymentMethodRequest, opts ...client.CallOption) (*DefaultPaymentMethodResponse, error) {
	req := c.c.NewRequest(c.name, "Accounts.DefaultPaymentMethod", in)
	out := new(DefaultPaymentMethodResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Accounts service

type AccountsHandler interface {
	Read(context.Context, *ReadAccountRequest, *ReadAccountResponse) error
	CreatePaymentMethod(context.Context, *CreatePaymentMethodRequest, *CreatePaymentMethodResponse) error
	DeletePaymentMethod(context.Context, *DeletePaymentMethodRequest, *DeletePaymentMethodResponse) error
	DefaultPaymentMethod(context.Context, *DefaultPaymentMethodRequest, *DefaultPaymentMethodResponse) error
}

func RegisterAccountsHandler(s server.Server, hdlr AccountsHandler, opts ...server.HandlerOption) error {
	type accounts interface {
		Read(ctx context.Context, in *ReadAccountRequest, out *ReadAccountResponse) error
		CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, out *CreatePaymentMethodResponse) error
		DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, out *DeletePaymentMethodResponse) error
		DefaultPaymentMethod(ctx context.Context, in *DefaultPaymentMethodRequest, out *DefaultPaymentMethodResponse) error
	}
	type Accounts struct {
		accounts
	}
	h := &accountsHandler{hdlr}
	return s.Handle(s.NewHandler(&Accounts{h}, opts...))
}

type accountsHandler struct {
	AccountsHandler
}

func (h *accountsHandler) Read(ctx context.Context, in *ReadAccountRequest, out *ReadAccountResponse) error {
	return h.AccountsHandler.Read(ctx, in, out)
}

func (h *accountsHandler) CreatePaymentMethod(ctx context.Context, in *CreatePaymentMethodRequest, out *CreatePaymentMethodResponse) error {
	return h.AccountsHandler.CreatePaymentMethod(ctx, in, out)
}

func (h *accountsHandler) DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, out *DeletePaymentMethodResponse) error {
	return h.AccountsHandler.DeletePaymentMethod(ctx, in, out)
}

func (h *accountsHandler) DefaultPaymentMethod(ctx context.Context, in *DefaultPaymentMethodRequest, out *DefaultPaymentMethodResponse) error {
	return h.AccountsHandler.DefaultPaymentMethod(ctx, in, out)
}

// Api Endpoints for Projects service

func NewProjectsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Projects service

type ProjectsService interface {
	ValidateGithubToken(ctx context.Context, in *ValidateGithubTokenRequest, opts ...client.CallOption) (*ValidateGithubTokenResponse, error)
	ValidateProjectName(ctx context.Context, in *ValidateProjectNameRequest, opts ...client.CallOption) (*ValidateProjectNameResponse, error)
	ValidateEnvironmentName(ctx context.Context, in *ValidateEnvironmentNameRequest, opts ...client.CallOption) (*ValidateEnvironmentNameResponse, error)
	WebhookAPIKey(ctx context.Context, in *WebhookAPIKeyRequest, opts ...client.CallOption) (*WebhookAPIKeyResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...client.CallOption) (*CreateProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...client.CallOption) (*UpdateProjectResponse, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...client.CallOption) (*ListProjectsResponse, error)
	CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...client.CallOption) (*CreateEnvironmentResponse, error)
	UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...client.CallOption) (*UpdateEnvironmentResponse, error)
	DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...client.CallOption) (*DeleteEnvironmentRequest, error)
	Invite(ctx context.Context, in *InviteRequest, opts ...client.CallOption) (*InviteResponse, error)
}

type projectsService struct {
	c    client.Client
	name string
}

func NewProjectsService(name string, c client.Client) ProjectsService {
	return &projectsService{
		c:    c,
		name: name,
	}
}

func (c *projectsService) ValidateGithubToken(ctx context.Context, in *ValidateGithubTokenRequest, opts ...client.CallOption) (*ValidateGithubTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.ValidateGithubToken", in)
	out := new(ValidateGithubTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) ValidateProjectName(ctx context.Context, in *ValidateProjectNameRequest, opts ...client.CallOption) (*ValidateProjectNameResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.ValidateProjectName", in)
	out := new(ValidateProjectNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) ValidateEnvironmentName(ctx context.Context, in *ValidateEnvironmentNameRequest, opts ...client.CallOption) (*ValidateEnvironmentNameResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.ValidateEnvironmentName", in)
	out := new(ValidateEnvironmentNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) WebhookAPIKey(ctx context.Context, in *WebhookAPIKeyRequest, opts ...client.CallOption) (*WebhookAPIKeyResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.WebhookAPIKey", in)
	out := new(WebhookAPIKeyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...client.CallOption) (*CreateProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.CreateProject", in)
	out := new(CreateProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...client.CallOption) (*UpdateProjectResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.UpdateProject", in)
	out := new(UpdateProjectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...client.CallOption) (*ListProjectsResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.ListProjects", in)
	out := new(ListProjectsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, opts ...client.CallOption) (*CreateEnvironmentResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.CreateEnvironment", in)
	out := new(CreateEnvironmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, opts ...client.CallOption) (*UpdateEnvironmentResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.UpdateEnvironment", in)
	out := new(UpdateEnvironmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, opts ...client.CallOption) (*DeleteEnvironmentRequest, error) {
	req := c.c.NewRequest(c.name, "Projects.DeleteEnvironment", in)
	out := new(DeleteEnvironmentRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsService) Invite(ctx context.Context, in *InviteRequest, opts ...client.CallOption) (*InviteResponse, error) {
	req := c.c.NewRequest(c.name, "Projects.Invite", in)
	out := new(InviteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Projects service

type ProjectsHandler interface {
	ValidateGithubToken(context.Context, *ValidateGithubTokenRequest, *ValidateGithubTokenResponse) error
	ValidateProjectName(context.Context, *ValidateProjectNameRequest, *ValidateProjectNameResponse) error
	ValidateEnvironmentName(context.Context, *ValidateEnvironmentNameRequest, *ValidateEnvironmentNameResponse) error
	WebhookAPIKey(context.Context, *WebhookAPIKeyRequest, *WebhookAPIKeyResponse) error
	CreateProject(context.Context, *CreateProjectRequest, *CreateProjectResponse) error
	UpdateProject(context.Context, *UpdateProjectRequest, *UpdateProjectResponse) error
	ListProjects(context.Context, *ListProjectsRequest, *ListProjectsResponse) error
	CreateEnvironment(context.Context, *CreateEnvironmentRequest, *CreateEnvironmentResponse) error
	UpdateEnvironment(context.Context, *UpdateEnvironmentRequest, *UpdateEnvironmentResponse) error
	DeleteEnvironment(context.Context, *DeleteEnvironmentRequest, *DeleteEnvironmentRequest) error
	Invite(context.Context, *InviteRequest, *InviteResponse) error
}

func RegisterProjectsHandler(s server.Server, hdlr ProjectsHandler, opts ...server.HandlerOption) error {
	type projects interface {
		ValidateGithubToken(ctx context.Context, in *ValidateGithubTokenRequest, out *ValidateGithubTokenResponse) error
		ValidateProjectName(ctx context.Context, in *ValidateProjectNameRequest, out *ValidateProjectNameResponse) error
		ValidateEnvironmentName(ctx context.Context, in *ValidateEnvironmentNameRequest, out *ValidateEnvironmentNameResponse) error
		WebhookAPIKey(ctx context.Context, in *WebhookAPIKeyRequest, out *WebhookAPIKeyResponse) error
		CreateProject(ctx context.Context, in *CreateProjectRequest, out *CreateProjectResponse) error
		UpdateProject(ctx context.Context, in *UpdateProjectRequest, out *UpdateProjectResponse) error
		ListProjects(ctx context.Context, in *ListProjectsRequest, out *ListProjectsResponse) error
		CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, out *CreateEnvironmentResponse) error
		UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, out *UpdateEnvironmentResponse) error
		DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, out *DeleteEnvironmentRequest) error
		Invite(ctx context.Context, in *InviteRequest, out *InviteResponse) error
	}
	type Projects struct {
		projects
	}
	h := &projectsHandler{hdlr}
	return s.Handle(s.NewHandler(&Projects{h}, opts...))
}

type projectsHandler struct {
	ProjectsHandler
}

func (h *projectsHandler) ValidateGithubToken(ctx context.Context, in *ValidateGithubTokenRequest, out *ValidateGithubTokenResponse) error {
	return h.ProjectsHandler.ValidateGithubToken(ctx, in, out)
}

func (h *projectsHandler) ValidateProjectName(ctx context.Context, in *ValidateProjectNameRequest, out *ValidateProjectNameResponse) error {
	return h.ProjectsHandler.ValidateProjectName(ctx, in, out)
}

func (h *projectsHandler) ValidateEnvironmentName(ctx context.Context, in *ValidateEnvironmentNameRequest, out *ValidateEnvironmentNameResponse) error {
	return h.ProjectsHandler.ValidateEnvironmentName(ctx, in, out)
}

func (h *projectsHandler) WebhookAPIKey(ctx context.Context, in *WebhookAPIKeyRequest, out *WebhookAPIKeyResponse) error {
	return h.ProjectsHandler.WebhookAPIKey(ctx, in, out)
}

func (h *projectsHandler) CreateProject(ctx context.Context, in *CreateProjectRequest, out *CreateProjectResponse) error {
	return h.ProjectsHandler.CreateProject(ctx, in, out)
}

func (h *projectsHandler) UpdateProject(ctx context.Context, in *UpdateProjectRequest, out *UpdateProjectResponse) error {
	return h.ProjectsHandler.UpdateProject(ctx, in, out)
}

func (h *projectsHandler) ListProjects(ctx context.Context, in *ListProjectsRequest, out *ListProjectsResponse) error {
	return h.ProjectsHandler.ListProjects(ctx, in, out)
}

func (h *projectsHandler) CreateEnvironment(ctx context.Context, in *CreateEnvironmentRequest, out *CreateEnvironmentResponse) error {
	return h.ProjectsHandler.CreateEnvironment(ctx, in, out)
}

func (h *projectsHandler) UpdateEnvironment(ctx context.Context, in *UpdateEnvironmentRequest, out *UpdateEnvironmentResponse) error {
	return h.ProjectsHandler.UpdateEnvironment(ctx, in, out)
}

func (h *projectsHandler) DeleteEnvironment(ctx context.Context, in *DeleteEnvironmentRequest, out *DeleteEnvironmentRequest) error {
	return h.ProjectsHandler.DeleteEnvironment(ctx, in, out)
}

func (h *projectsHandler) Invite(ctx context.Context, in *InviteRequest, out *InviteResponse) error {
	return h.ProjectsHandler.Invite(ctx, in, out)
}
