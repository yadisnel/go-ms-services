{"version":3,"sources":["webpack:///node_modules/highlightjs-line-numbers.js/src/highlightjs-line-numbers.js"],"names":["w","d","css","BREAK_LINE_REGEXP","documentReady","options","blocks","querySelectorAll","i","hasOwnProperty","lineNumbersBlock","e","console","error","element","setTimeout","innerHTML","lineNumbersInternal","firstLineIndex","singleLine","duplicateMultilineNodes","nodes","childNodes","node","child","textContent","trim","match","length","duplicateMultilineNode","parentNode","inputHtml","lines","getLines","pop","html","l","format","className","test","result","text","split","args","replace","m","n","hljs","initLineNumbersOnLoad","readyState","addEventListener","lineNumbersValue","value","document","createElement","type","getElementsByTagName","appendChild","selectionText","selection","window","getSelection","domElt","curElt","indexOf","anchorNode","navigator","userAgent","toString","tdAnchor","nodeName","tdFocus","focusNode","firstLineNumber","parseInt","dataset","lineNumber","lastLineNumber","firstLineText","lastLineText","tmp","slice","lastIndexOf","selectedText","hljsLnTable","hljsLnDomElt","codeLineSel","querySelector","clipboardData","setData","preventDefault"],"mappings":"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","file":"x","sourcesContent":["// jshint multistr:true\n\n(function (w, d) {\n    'use strict';\n\n    var TABLE_NAME = 'hljs-ln',\n        LINE_NAME = 'hljs-ln-line',\n        CODE_BLOCK_NAME = 'hljs-ln-code',\n        NUMBERS_BLOCK_NAME = 'hljs-ln-numbers',\n        NUMBER_LINE_NAME = 'hljs-ln-n',\n        DATA_ATTR_NAME = 'data-line-number',\n        BREAK_LINE_REGEXP = /\\r\\n|\\r|\\n/g;\n\n    if (w.hljs) {\n        w.hljs.initLineNumbersOnLoad = initLineNumbersOnLoad;\n        w.hljs.lineNumbersBlock = lineNumbersBlock;\n        w.hljs.lineNumbersValue = lineNumbersValue;\n\n        addStyles();\n    } else {\n        w.console.error('highlight.js not detected!');\n    }\n\n    function isHljsLnCodeDescendant(domElt) {\n        var curElt = domElt;\n        while (curElt) {\n            if (curElt.className && curElt.className.indexOf('hljs-ln-code') !== -1) {\n                return true;\n            }\n            curElt = curElt.parentNode;\n        }\n        return false;\n    }\n\n    function getHljsLnTable(hljsLnDomElt) {\n        var curElt = hljsLnDomElt;\n        while (curElt.nodeName !== 'TABLE') {\n            curElt = curElt.parentNode;\n        }\n        return curElt;\n    }\n\n    // Function to workaround a copy issue with Microsoft Edge.\n    // Due to hljs-ln wrapping the lines of code inside a <table> element,\n    // itself wrapped inside a <pre> element, window.getSelection().toString()\n    // does not contain any line breaks. So we need to get them back using the\n    // rendered code in the DOM as reference.\n    function edgeGetSelectedCodeLines(selection) {\n        // current selected text without line breaks\n        var selectionText = selection.toString();\n\n        // get the <td> element wrapping the first line of selected code\n        var tdAnchor = selection.anchorNode;\n        while (tdAnchor.nodeName !== 'TD') {\n            tdAnchor = tdAnchor.parentNode;\n        }\n\n        // get the <td> element wrapping the last line of selected code\n        var tdFocus = selection.focusNode;\n        while (tdFocus.nodeName !== 'TD') {\n            tdFocus = tdFocus.parentNode;\n        }\n\n        // extract line numbers\n        var firstLineNumber = parseInt(tdAnchor.dataset.lineNumber);\n        var lastLineNumber = parseInt(tdFocus.dataset.lineNumber);\n\n        // multi-lines copied case\n        if (firstLineNumber != lastLineNumber) {\n\n            var firstLineText = tdAnchor.textContent;\n            var lastLineText = tdFocus.textContent;\n\n            // if the selection was made backward, swap values\n            if (firstLineNumber > lastLineNumber) {\n                var tmp = firstLineNumber;\n                firstLineNumber = lastLineNumber;\n                lastLineNumber = tmp;\n                tmp = firstLineText;\n                firstLineText = lastLineText;\n                lastLineText = tmp;\n            }\n\n            // discard not copied characters in first line\n            while (selectionText.indexOf(firstLineText) !== 0) {\n                firstLineText = firstLineText.slice(1);\n            }\n\n            // discard not copied characters in last line\n            while (selectionText.lastIndexOf(lastLineText) === -1) {\n                lastLineText = lastLineText.slice(0, -1);\n            }\n\n            // reconstruct and return the real copied text\n            var selectedText = firstLineText;\n            var hljsLnTable = getHljsLnTable(tdAnchor);\n            for (var i = firstLineNumber + 1 ; i < lastLineNumber ; ++i) {\n                var codeLineSel = format('.{0}[{1}=\"{2}\"]', [CODE_BLOCK_NAME, DATA_ATTR_NAME, i]);\n                var codeLineElt = hljsLnTable.querySelector(codeLineSel);\n                selectedText += '\\n' + codeLineElt.textContent;\n            }\n            selectedText += '\\n' + lastLineText;\n            return selectedText;\n        // single copied line case\n        } else {\n            return selectionText;\n        }\n    }\n\n    // ensure consistent code copy/paste behavior across all browsers\n    // (see https://github.com/wcoder/highlightjs-line-numbers.js/issues/51)\n    document.addEventListener('copy', function(e) {\n        // get current selection\n        var selection = window.getSelection();\n        // override behavior when one wants to copy line of codes\n        if (isHljsLnCodeDescendant(selection.anchorNode)) {\n            var selectionText;\n            // workaround an issue with Microsoft Edge as copied line breaks\n            // are removed otherwise from the selection string\n            if (window.navigator.userAgent.indexOf(\"Edge\") !== -1) {\n                selectionText = edgeGetSelectedCodeLines(selection);\n            } else {\n                // other browsers can directly use the selection string\n                selectionText = selection.toString();\n            }\n            e.clipboardData.setData('text/plain', selectionText);\n            e.preventDefault();\n        }\n    });\n\n    function addStyles () {\n        var css = d.createElement('style');\n        css.type = 'text/css';\n        css.innerHTML = format(\n            '.{0}{border-collapse:collapse}' +\n            '.{0} td{padding:0}' +\n            '.{1}:before{content:attr({2})}',\n        [\n            TABLE_NAME,\n            NUMBER_LINE_NAME,\n            DATA_ATTR_NAME\n        ]);\n        d.getElementsByTagName('head')[0].appendChild(css);\n    }\n\n    function initLineNumbersOnLoad (options) {\n        if (d.readyState === 'interactive' || d.readyState === 'complete') {\n            documentReady(options);\n        } else {\n            w.addEventListener('DOMContentLoaded', function () {\n                documentReady(options);\n            });\n        }\n    }\n\n    function documentReady (options) {\n        try {\n            var blocks = d.querySelectorAll('code.hljs,code.nohighlight');\n\n            for (var i in blocks) {\n                if (blocks.hasOwnProperty(i)) {\n                    lineNumbersBlock(blocks[i], options);\n                }\n            }\n        } catch (e) {\n            w.console.error('LineNumbers error: ', e);\n        }\n    }\n\n    function lineNumbersBlock (element, options) {\n        if (typeof element !== 'object') return;\n\n        async(function () {\n            element.innerHTML = lineNumbersInternal(element, options);\n        });\n    }\n\n    function lineNumbersValue (value, options) {\n        if (typeof value !== 'string') return;\n\n        var element = document.createElement('code')\n        element.innerHTML = value\n\n        return lineNumbersInternal(element, options);\n    }\n\n    function lineNumbersInternal (element, options) {\n        // define options or set default\n        options = options || {\n            singleLine: false\n        };\n\n        // convert options\n        var firstLineIndex = !!options.singleLine ? 0 : 1;\n\n        duplicateMultilineNodes(element);\n\n        return addLineNumbersBlockFor(element.innerHTML, firstLineIndex);\n    }\n\n    function addLineNumbersBlockFor (inputHtml, firstLineIndex) {\n\n        var lines = getLines(inputHtml);\n\n        // if last line contains only carriage return remove it\n        if (lines[lines.length-1].trim() === '') {\n            lines.pop();\n        }\n\n        if (lines.length > firstLineIndex) {\n            var html = '';\n\n            for (var i = 0, l = lines.length; i < l; i++) {\n                html += format(\n                    '<tr>' +\n                        '<td class=\"{0} {1}\" {3}=\"{5}\">' +\n                            '<div class=\"{2}\" {3}=\"{5}\"></div>' +\n                        '</td>' +\n                        '<td class=\"{0} {4}\" {3}=\"{5}\">' +\n                            '{6}' +\n                        '</td>' +\n                    '</tr>',\n                [\n                    LINE_NAME,\n                    NUMBERS_BLOCK_NAME,\n                    NUMBER_LINE_NAME,\n                    DATA_ATTR_NAME,\n                    CODE_BLOCK_NAME,\n                    i + 1,\n                    lines[i].length > 0 ? lines[i] : ' '\n                ]);\n            }\n\n            return format('<table class=\"{0}\">{1}</table>', [ TABLE_NAME, html ]);\n        }\n\n        return inputHtml;\n    }\n\n    /**\n     * Recursive method for fix multi-line elements implementation in highlight.js\n     * Doing deep passage on child nodes.\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNodes (element) {\n        var nodes = element.childNodes;\n        for (var node in nodes) {\n            if (nodes.hasOwnProperty(node)) {\n                var child = nodes[node];\n                if (getLinesCount(child.textContent) > 0) {\n                    if (child.childNodes.length > 0) {\n                        duplicateMultilineNodes(child);\n                    } else {\n                        duplicateMultilineNode(child.parentNode);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Method for fix multi-line elements implementation in highlight.js\n     * @param {HTMLElement} element\n     */\n    function duplicateMultilineNode (element) {\n        var className = element.className;\n\n        if ( ! /hljs-/.test(className)) return;\n\n        var lines = getLines(element.innerHTML);\n\n        for (var i = 0, result = ''; i < lines.length; i++) {\n            var lineText = lines[i].length > 0 ? lines[i] : ' ';\n            result += format('<span class=\"{0}\">{1}</span>\\n', [ className,  lineText ]);\n        }\n\n        element.innerHTML = result.trim();\n    }\n\n    function getLines (text) {\n        if (text.length === 0) return [];\n        return text.split(BREAK_LINE_REGEXP);\n    }\n\n    function getLinesCount (text) {\n        return (text.trim().match(BREAK_LINE_REGEXP) || []).length;\n    }\n\n    function async (func) {\n        w.setTimeout(func, 0);\n    }\n\n    /**\n     * {@link https://wcoder.github.io/notes/string-format-for-string-formating-in-javascript}\n     * @param {string} format\n     * @param {array} args\n     */\n    function format (format, args) {\n        return format.replace(/\\{(\\d+)\\}/g, function(m, n){\n            return args[n] ? args[n] : m;\n        });\n    }\n\n}(window, document));\n"]}