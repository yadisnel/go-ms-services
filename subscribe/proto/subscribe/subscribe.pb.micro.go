// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/micro/services/subscribe/proto/subscribe/subscribe.proto

package go_micro_srv_subscribe

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Subscribe service

type SubscribeService interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error)
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...client.CallOption) (*ListSubscriptionsResponse, error)
}

type subscribeService struct {
	c    client.Client
	name string
}

func NewSubscribeService(name string, c client.Client) SubscribeService {
	return &subscribeService{
		c:    c,
		name: name,
	}
}

func (c *subscribeService) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*SubscribeResponse, error) {
	req := c.c.NewRequest(c.name, "Subscribe.Subscribe", in)
	out := new(SubscribeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeService) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...client.CallOption) (*ListSubscriptionsResponse, error) {
	req := c.c.NewRequest(c.name, "Subscribe.ListSubscriptions", in)
	out := new(ListSubscriptionsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Subscribe service

type SubscribeHandler interface {
	Subscribe(context.Context, *SubscribeRequest, *SubscribeResponse) error
	ListSubscriptions(context.Context, *ListSubscriptionsRequest, *ListSubscriptionsResponse) error
}

func RegisterSubscribeHandler(s server.Server, hdlr SubscribeHandler, opts ...server.HandlerOption) error {
	type subscribe interface {
		Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error
		ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, out *ListSubscriptionsResponse) error
	}
	type Subscribe struct {
		subscribe
	}
	h := &subscribeHandler{hdlr}
	return s.Handle(s.NewHandler(&Subscribe{h}, opts...))
}

type subscribeHandler struct {
	SubscribeHandler
}

func (h *subscribeHandler) Subscribe(ctx context.Context, in *SubscribeRequest, out *SubscribeResponse) error {
	return h.SubscribeHandler.Subscribe(ctx, in, out)
}

func (h *subscribeHandler) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, out *ListSubscriptionsResponse) error {
	return h.SubscribeHandler.ListSubscriptions(ctx, in, out)
}
