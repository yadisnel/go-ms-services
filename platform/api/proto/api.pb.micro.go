// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/api.proto

package go_micro_api_platform

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Platform service

type PlatformService interface {
	ReadUser(ctx context.Context, in *ReadUserRequest, opts ...client.CallOption) (*ReadUserResponse, error)
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...client.CallOption) (*CreateServiceResponse, error)
	ReadService(ctx context.Context, in *ReadServiceRequest, opts ...client.CallOption) (*ReadServiceResponse, error)
	UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...client.CallOption) (*UpdateServiceResponse, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...client.CallOption) (*DeleteServiceResponse, error)
	ListServices(ctx context.Context, in *ListServicesRequest, opts ...client.CallOption) (*ListServicesResponse, error)
}

type platformService struct {
	c    client.Client
	name string
}

func NewPlatformService(name string, c client.Client) PlatformService {
	return &platformService{
		c:    c,
		name: name,
	}
}

func (c *platformService) ReadUser(ctx context.Context, in *ReadUserRequest, opts ...client.CallOption) (*ReadUserResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.ReadUser", in)
	out := new(ReadUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...client.CallOption) (*CreateServiceResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.CreateService", in)
	out := new(CreateServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) ReadService(ctx context.Context, in *ReadServiceRequest, opts ...client.CallOption) (*ReadServiceResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.ReadService", in)
	out := new(ReadServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) UpdateService(ctx context.Context, in *UpdateServiceRequest, opts ...client.CallOption) (*UpdateServiceResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.UpdateService", in)
	out := new(UpdateServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...client.CallOption) (*DeleteServiceResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.DeleteService", in)
	out := new(DeleteServiceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformService) ListServices(ctx context.Context, in *ListServicesRequest, opts ...client.CallOption) (*ListServicesResponse, error) {
	req := c.c.NewRequest(c.name, "Platform.ListServices", in)
	out := new(ListServicesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Platform service

type PlatformHandler interface {
	ReadUser(context.Context, *ReadUserRequest, *ReadUserResponse) error
	CreateService(context.Context, *CreateServiceRequest, *CreateServiceResponse) error
	ReadService(context.Context, *ReadServiceRequest, *ReadServiceResponse) error
	UpdateService(context.Context, *UpdateServiceRequest, *UpdateServiceResponse) error
	DeleteService(context.Context, *DeleteServiceRequest, *DeleteServiceResponse) error
	ListServices(context.Context, *ListServicesRequest, *ListServicesResponse) error
}

func RegisterPlatformHandler(s server.Server, hdlr PlatformHandler, opts ...server.HandlerOption) error {
	type platform interface {
		ReadUser(ctx context.Context, in *ReadUserRequest, out *ReadUserResponse) error
		CreateService(ctx context.Context, in *CreateServiceRequest, out *CreateServiceResponse) error
		ReadService(ctx context.Context, in *ReadServiceRequest, out *ReadServiceResponse) error
		UpdateService(ctx context.Context, in *UpdateServiceRequest, out *UpdateServiceResponse) error
		DeleteService(ctx context.Context, in *DeleteServiceRequest, out *DeleteServiceResponse) error
		ListServices(ctx context.Context, in *ListServicesRequest, out *ListServicesResponse) error
	}
	type Platform struct {
		platform
	}
	h := &platformHandler{hdlr}
	return s.Handle(s.NewHandler(&Platform{h}, opts...))
}

type platformHandler struct {
	PlatformHandler
}

func (h *platformHandler) ReadUser(ctx context.Context, in *ReadUserRequest, out *ReadUserResponse) error {
	return h.PlatformHandler.ReadUser(ctx, in, out)
}

func (h *platformHandler) CreateService(ctx context.Context, in *CreateServiceRequest, out *CreateServiceResponse) error {
	return h.PlatformHandler.CreateService(ctx, in, out)
}

func (h *platformHandler) ReadService(ctx context.Context, in *ReadServiceRequest, out *ReadServiceResponse) error {
	return h.PlatformHandler.ReadService(ctx, in, out)
}

func (h *platformHandler) UpdateService(ctx context.Context, in *UpdateServiceRequest, out *UpdateServiceResponse) error {
	return h.PlatformHandler.UpdateService(ctx, in, out)
}

func (h *platformHandler) DeleteService(ctx context.Context, in *DeleteServiceRequest, out *DeleteServiceResponse) error {
	return h.PlatformHandler.DeleteService(ctx, in, out)
}

func (h *platformHandler) ListServices(ctx context.Context, in *ListServicesRequest, out *ListServicesResponse) error {
	return h.PlatformHandler.ListServices(ctx, in, out)
}
