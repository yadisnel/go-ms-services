// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/apps/apps.proto

package go_micro_api_apps

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Apps service

type AppsService interface {
	Import(ctx context.Context, in *ImportRequest, opts ...client.CallOption) (*ImportResponse, error)
}

type appsService struct {
	c    client.Client
	name string
}

func NewAppsService(name string, c client.Client) AppsService {
	return &appsService{
		c:    c,
		name: name,
	}
}

func (c *appsService) Import(ctx context.Context, in *ImportRequest, opts ...client.CallOption) (*ImportResponse, error) {
	req := c.c.NewRequest(c.name, "Apps.Import", in)
	out := new(ImportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Apps service

type AppsHandler interface {
	Import(context.Context, *ImportRequest, *ImportResponse) error
}

func RegisterAppsHandler(s server.Server, hdlr AppsHandler, opts ...server.HandlerOption) error {
	type apps interface {
		Import(ctx context.Context, in *ImportRequest, out *ImportResponse) error
	}
	type Apps struct {
		apps
	}
	h := &appsHandler{hdlr}
	return s.Handle(s.NewHandler(&Apps{h}, opts...))
}

type appsHandler struct {
	AppsHandler
}

func (h *appsHandler) Import(ctx context.Context, in *ImportRequest, out *ImportResponse) error {
	return h.AppsHandler.Import(ctx, in, out)
}
